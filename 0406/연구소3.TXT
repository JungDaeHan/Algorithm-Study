#include <cstdio>
#include <iostream>
#include <queue>
#include <vector>

#define MAX 3001
#define AREA_LEFT 3000

using namespace std;

int dir[4][2] = { {0,1}, {0,-1}, {1,0}, {-1,0} };
int input_map[50][50];
int input_visited[50][50];
int N, M;

int map[50][50];
int visited[50][50];
vector<pair<int, int>> virus;
queue<pair<int, int>> Q;
int min_time = MAX;
int selected[10] = { 0, };

int cal()
{
	int max_dist = 0;
	int tx, ty;
	int flag = 0;

	for (int i = 0; i < virus.size(); i++)
	{
		if (selected[i] == 1)
		{
			Q.push(make_pair(virus[i].first, virus[i].second));
			map[virus[i].first][virus[i].second] = 0;
			visited[virus[i].first][virus[i].second] = 1;
		}
	}

	while (Q.empty() != 1)
	{
		pair<int, int> x = Q.front();
		Q.pop();

		for (int i = 0; i < 4; i++)
		{
			tx = x.first + dir[i][0];
			ty = x.second + dir[i][1];

			if (tx < 0 || tx >= N || ty < 0 || ty >= N || visited[tx][ty] == 1) continue;

			visited[tx][ty] = 1;
			Q.push(make_pair(tx, ty));
			map[tx][ty] = map[x.first][x.second] + 1;

			if (max_dist < map[tx][ty])
				max_dist = map[tx][ty];

		}
	}

	/*
	printf("\n");
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			printf("%d ", map[i][j]);
		printf("\n");
	}
	printf("\n");
	*/

	max_dist = 0;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			if (visited[i][j] == 0)
				return AREA_LEFT;

			if (input_map[i][j] == 0 && max_dist < map[i][j])
				max_dist = map[i][j];
		}
	
	return max_dist;

}

void permu(int idx, int cnt)
{
	if (cnt == M)
	{
		while (Q.empty() != 1)
			Q.pop();

		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
			{
				visited[i][j] = input_visited[i][j];
				map[i][j] = input_map[i][j];
			}

		int tmp = cal();

		if (min_time > tmp)
			min_time = tmp;
			
		return;
	}

	for (int i = idx; i < virus.size(); i++)
	{
		if (selected[i] == 1)
			continue;
		selected[i] = 1;
		permu(i + 1, cnt + 1);
		selected[i] = 0;
	}
}

int main()
{
	cin >> N >> M;


	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> input_map[i][j];

			if (input_map[i][j] == 2)
				virus.push_back(make_pair(i, j));
			else if (input_map[i][j] == 1)
				input_visited[i][j] = 1;
		}
	}

	permu(0, 0);

	if (min_time == AREA_LEFT)
		printf("-1");
	else
		printf("%d", min_time);

	return 0;
}