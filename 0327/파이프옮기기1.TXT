#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int map[16][16];
int N;
int total_sum=0;

void backtrack(int pipe,int x,int y)
{
	// x y 가 N-1,N-1 에 도달
	if (x < 0 || x >= N || y < 0 || y >= N || map[x][y] == 1 ||
		(pipe == 2 && (map[x-1][y] == 1 || map[x][y-1] == 1) ) )
		return;

	if (x == N - 1 && y == N - 1)
	{
		total_sum++;
		return;
	}

	if (pipe == 0)
	{
		backtrack(0, x, y + 1);
		backtrack(2, x + 1, y + 1);
	}
	else if (pipe == 1)
	{
		backtrack(1, x + 1, y);
		backtrack(2, x + 1, y + 1);
	}
	else
	{
		backtrack(0, x, y + 1);
		backtrack(1, x + 1, y);
		backtrack(2, x + 1, y + 1);
	}
}


int main()
{
	cin >> N;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> map[i][j];

	// 시작에서 갈 수 있는 방법은 2가지, 
	// (0,1) -> (0,2) , (0,1) -> (1,1)
	// 그다음 가로는 2가지, 대각선은 3가지
	// 가로 : 0, 세로 : 1, 대각선 : 2
	// 처음엔 가로를 뜻하는 0 으로 시작, 0이면 0과 2를 주고 재귀
	// 세로는 1과 2를 주고 재귀
	// 대각선은 0 1 2  하나씩 줘보며 재귀.
	// 재귀 앞의 탈출 조건이 관건. 
	// 그러다가 N*N 으로 도달을 했으면 total_sum 을 하나 더해주고 리턴 ㅇㅇ

	backtrack(0,0,1);

	printf("%d", total_sum);

	return 0;
}