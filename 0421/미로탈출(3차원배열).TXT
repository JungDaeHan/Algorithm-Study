#include <cstdio>
#include <algorithm>
#include <queue>
#include <vector>
#include <cstring>

#define MAX 999999999

using namespace std;

// review : 3차원배열을 이용해 벽이 뚫렸을 때의 거리를 계산해 나가는데, 더 작은 거리가 나오는 경우
// 갱신을 해주는 식으로 visit 를 활용. 처음에 ex,ey 좌표가 나온 dist 가 최소의 dist 이니까 그걸 리턴 해주면 됨.
// 벽일 때, 벽을 뚫은 적이 없고, 작은 거리일 때 벽을 뚫어버리고 지나감. flag 는 이때 1로 바뀜(난 벽을 뚫었다)
// 벽 아니면 그냥 거리만 보고 그대로 visited[nx][ny][flag] 배열에 거리를 1 더해서 큐 넣어주면 됨
// 주의 : visited 배열을 처음에 전부 MAX 로 초기화해야, 갱신해 나갈 때 유의미

int dx[4] = {0,0,1,-1};
int dy[4] = {1,-1,0,0};

int N,M;
int mapp[1001][1001];
int visited[1001][1001][2]; //3차원 배열을 이용 : 벽을 뚫고 가는 중인건지에 대한 여부 flag
int sx,sy,ex,ey;
vector<pair<int,int>> v;
queue<pair<pair<int,int>,pair<int,int>>> q; // 마지막 int 는 벽을 뚫은 적이 있는지를 표시
int minn = -1;

void go()
{
    q.push({ {sx-1,sy-1} , {0,0} });
    visited[sx-1][sy-1][0] = 1;
        
    while(q.empty() != 1)
    {
        int x = q.front().first.first;
        int y = q.front().first.second;
        int flag = q.front().second.first;
        int dist = q.front().second.second;
        q.pop();
        
        if(x==ex-1 && y==ey-1)
        {
            minn = dist;
            return;
        }
        
        for(int i=0;i<4;i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            
            if(nx < 0 || nx >= N || ny < 0 || ny >= M) continue;
            
            if(mapp[nx][ny] == -1) //벽
            {
                if(visited[nx][ny][0] > dist+1  && flag == 0 )
                {
                    visited[nx][ny][1] = dist+1 ;
                    q.push({{nx,ny},{1,dist+1}});
                }
            }
            else 
            {
                if(visited[nx][ny][flag] > dist+1)
                {
                    visited[nx][ny][flag] = dist +1;
                    q.push({{nx,ny},{flag,dist+1}});
                }
            }
            
        }
    }
}

void init()
{
    scanf("%d %d", &N, &M);
    scanf("%d %d %d %d", &sx, &sy, &ex, &ey);

    for(int i=0;i<N;i++)
        for(int j=0;j<M;j++)
        {
            scanf("%d ", &mapp[i][j]);
            if(mapp[i][j] == 1)
            {
                v.push_back({i,j});
                mapp[i][j] = -1;
            }
            visited[i][j][0] = MAX;
            visited[i][j][1] = MAX;
        }
    
    go();
    
    printf("%d ", minn);
}

int main()
{
    init();
    return 0;
}