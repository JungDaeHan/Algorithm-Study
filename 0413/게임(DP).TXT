#include <cstdio>

#define MAX(X,Y) (X) > (Y) ? (X) : (Y)
using namespace std;

            //우,하,상,좌
int dx[4] = {0,1,-1,0};
int dy[4] = {1,0,0,-1};

int N,M;
char mapp[51][51];
int selected[52][52]; // 4 는 방향
int result = -1;
int flag = 0; // 사이클 발생 시 1 로 바뀜
int dp[51][51] = {-1,};

int go(int x,int y)
{   
    if(flag == 1) return 0; // 싸이클이 한 번 발생하여 재귀 자체를 종료하기 위함
    
    if( x < 0 || x >= N || y < 0 || y >= M || mapp[x][y] == 'H') // 벽이나 구멍으로 빠짐
        return 0;
    
    if(selected[x][y] == 1) // 싸이클 존재 -> 싸이클 존재를 dp보다 먼저 확인해줘야 싸이클이 존재하는데도
    {                       // 보지않고 return dp 하는 경우가 생겨서 틀린것 같다.
        flag = 1;
        return 0;
    }
    
    if(dp[x][y] != -1 ) // dp에 이미 읽혀서 답이 정해진 소문제인 경우
        return dp[x][y];
    
    selected[x][y] = 1;
    for(int i=0;i<4;i++)
    {   
        int nx = x + (mapp[x][y]-'0') * dx[i];
        int ny = y + (mapp[x][y]-'0') * dy[i];
        dp[x][y] = MAX(dp[x][y], go(nx,ny) + 1);
        if(flag == 1) return 0;
    }
    selected[x][y] = 0;
    return dp[x][y];
}
            
void solve()
{
    scanf("%d %d", &N,&M);
    
    for(int i=0;i<N;i++)
        for(int j=0;j<M;j++)
        {
            scanf(" %c", &mapp[i][j]);
            dp[i][j] = -1;
        }
    
    go(0,0);
    
    if(flag == 1)
        printf("-1");
    else
        printf("%d", dp[0][0]);
}

int main()
{
    solve();
    return 0;
}