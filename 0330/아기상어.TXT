#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

int dir[4][2] = { {0,1}, {0,-1}, {1,0}, {-1,0} };

struct Shark{
	int x;
	int y;
	int size;
	int eat;
} shark;

struct tobe_eated{
	int x;
	int y;
	int dist;
} e;

queue<int> Q[2];

int map[20][20];
int check[20][20] = {0,};
int N;
int time=0;

void change_eat(int a,int b,int c)
{
	e.x = a;
	e.y = b;
	e.dist = c;
}

void BFS()
{
	int x,y;
	int tx,ty;

	while(1)
	{
		e.x = 21;
		e.y = 21;
		e.dist = 500;

		while(Q[0].empty() != 1)
		{
			x = Q[0].front();
			y = Q[1].front();

			Q[0].pop();
			Q[1].pop();


			for(int i=0;i<4;i++)
			{
				tx = x + dir[i][0];
				ty = y + dir[i][1];

				if( tx>=0 && tx<N && ty>=0 && ty<N && map[tx][ty] <= shark.size && map[tx][ty] != 9 && check[tx][ty] == 0 )
				{
					//printf("\n");
					//printf("%d %d %d %d \n", tx, ty, check[tx][ty], map[tx][ty]);
					//printf("\n");

					check[tx][ty] = check[x][y] + 1;

					if(map[tx][ty] != 0 && map[tx][ty] < shark.size)
					{
						if(e.dist >= check[tx][ty])
						{
							if(e.dist > check[tx][ty])
								change_eat(tx,ty,check[tx][ty]);
							else
							{
								if(e.x >= tx)
								{
									if(e.x > tx)
										change_eat(tx,ty,check[tx][ty]);
									else
										if(e.y >= ty)
											if(e.y > ty)
												change_eat(tx,ty,check[tx][ty]);
								}
							}
						}	
					}

					Q[0].push(tx);
					Q[1].push(ty);
				}
			}
		}		
		if(e.x == 21)
			return;
		else
		{
			map[shark.x][shark.y] = 0;

			shark.x = e.x;
			shark.y = e.y;
			shark.eat++;
			
			time += e.dist;

			map[shark.x][shark.y] = 9;

			if(shark.size == shark.eat)
			{
				shark.eat = 0;
				shark.size++;
			}
		}

		Q[0].push(shark.x);
		Q[1].push(shark.y);

		for(int i=0;i<N;i++)
			for(int j=0;j<N;j++)
				check[i][j] = 0;
	}


}

int main()
{
	
	scanf("%d", &N);

	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			scanf("%d", &map[i][j]);
			
			if(map[i][j] == 9)
			{
				shark.x = i;
				shark.y = j;
				shark.size = 2;
				shark.eat = 0 ;

				Q[0].push(i);
				Q[1].push(j);
			}
		}
	}

	BFS();

	printf("%d", time);


	return 0;
}