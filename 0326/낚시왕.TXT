//시간초과에 대한 핵심 : 반복되는 부분은 모듈러 연산으로 연산량을 줄일 것

#include <vector>
#include <cstdio>
#include <queue>

using namespace std;

int dir[5][2] = { {0,0}, {-1,0}, {1,0}, {0,1}, {0,-1} };

int R,C;
int result = 0;

typedef struct
{
	int dir;
	int speed;
	int size;
	int isin;
} MAP;

MAP map[2][101][101];
// 비어있는 새로운 맵에 따로 상어들 진행시킴.

queue<int> Q[2][2];

int changeDir(int x)
{
	if(x==1)
		return 2;
	else if(x==2)
		return 1;
	else if(x==3)
		return 4;
	else if(x==4)
		return 3;

	return -1;
}

void BFS()
{
	int br = 0;
	int xp,yp;
	int tmpx,tmpy;
	int lim;
	int tmp_speed[2];
	int tm;

	for(int k=1;k<C;k++)
	{
		for(int l= 1; l < R; l++)
		{
			if(map[br][l][k].isin == 1)
			{
				//printf("%d \n", map[br][l][k].size);
				result += map[br][l][k].size;
				map[br][l][k].isin = 0;
				break;
			}
		}

		while(Q[br][0].empty() != 1)
		{
		
			xp = Q[br][0].front();
			yp = Q[br][1].front();

			tmpx = xp;
			tmpy = yp;

			Q[br][0].pop();
			Q[br][1].pop();

			if(map[br][xp][yp].isin == 0)
				continue;

			lim = 0;

			//printf("%d %d \n", xp,yp);
			tmp_speed[0] = map[br][xp][yp].speed % ( (R-2)*2 ); // 세로 길이 -> 북, 남 
			tmp_speed[1]= map[br][xp][yp].speed % ( (C-2)*2 ); // 가로 길이 -> 동 서

			if(map[br][xp][yp].dir == 1 || map[br][xp][yp].dir == 2)
				tm = 0;
			else if(map[br][xp][yp].dir == 3 || map[br][xp][yp].dir == 4)
				tm = 1;

			while(lim < tmp_speed[tm] )
			{
				
				tmpx += dir[map[br][xp][yp].dir][0];
				tmpy += dir[map[br][xp][yp].dir][1];

				//printf("%d %d %d %d\n" ,tmpx, tmpy, map[br][xp][yp].dir,lim );
				//printf("%d aaaaaa\n", R);
				//printf("%d %d \n", tmpx, tmpy);

				if( tmpx < 1 || tmpx > R-1 || tmpy < 1 || tmpy > C-1)
				{
					//printf("%d %d \n", tmpx, tmpy);
					tmpx -= dir[map[br][xp][yp].dir][0];
					tmpy -= dir[map[br][xp][yp].dir][1];

					map[br][xp][yp].dir = changeDir(map[br][xp][yp].dir);
					continue;
				}

				lim++;
			}

			if(map[(br+1)%2][tmpx][tmpy].isin == 1)
			{
				if(map[(br+1)%2][tmpx][tmpy].size < map[br][xp][yp].size )
				{
					map[(br+1)%2][tmpx][tmpy].size = map[br][xp][yp].size;
					map[(br+1)%2][tmpx][tmpy].speed = map[br][xp][yp].speed;
					map[(br+1)%2][tmpx][tmpy].dir = map[br][xp][yp].dir;
				}
			}
			else
			{
					map[(br+1)%2][tmpx][tmpy].size = map[br][xp][yp].size;
					map[(br+1)%2][tmpx][tmpy].speed = map[br][xp][yp].speed;
					map[(br+1)%2][tmpx][tmpy].dir = map[br][xp][yp].dir;
					map[(br+1)%2][tmpx][tmpy].isin = 1;
			}

			map[br][xp][yp].isin = 0;

			Q[(br+1)%2][0].push(tmpx);
			Q[(br+1)%2][1].push(tmpy);
		}
		br = (br+1)%2;
	}
}

int main()
{
	int M;
	int r,c,s,d,z;

	scanf("%d %d %d", &R, &C, &M);

	R++;
	C++;

	for(int k=0;k<2;k++)
	{
		for(int i=0;i<R;i++)
		{
			for(int j=0;j<C;j++)
				map[k][i][j].isin = 0;
		}
	}


	for(int i=0;i<M;i++)
	{
		scanf("%d %d %d %d %d", &r,&c,&s,&d,&z);

		map[0][r][c].speed = s;
		map[0][r][c].dir = d;
		map[0][r][c].size = z;
		map[0][r][c].isin = 1;

		Q[0][0].push(r);
		Q[0][1].push(c);
		
	}
	/*
	printf("\n");

	for(int i=1;i<R;i++)
	{
		for(int j=1;j<C;j++)
			printf("%d ", map[0][i][j].isin);
		printf("\n");
	}*/



	BFS();

	printf("%d", result);




	return 0;
}